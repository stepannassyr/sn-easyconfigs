--- a/easybuild/easyblocks/c/clang.py	2020-10-15 22:31:05.000000000 +0200
+++ b/easybuild/easyblocks/c/clang.py	2020-10-15 19:57:55.946322634 +0200
@@ -83,6 +83,7 @@
             'default_openmp_runtime': [None, "Default OpenMP runtime for clang (for example, 'libomp')", CUSTOM],
             'enable_rtti': [False, "Enable Clang RTTI", CUSTOM],
             'libcxx': [False, "Build the LLVM C++ standard library", CUSTOM],
+            'one_source': [False, "Use one llvm-project source instead of multiple", CUSTOM],
             'static_analyzer': [True, "Install the static analyser of Clang", CUSTOM],
             'skip_all_tests': [False, "Skip running of tests", CUSTOM],
             # The sanitizer tests often fail on HPC systems due to the 'weird' environment.
@@ -124,6 +125,7 @@
           tools/
             clang/         Unpack clang-*.tar.gz here
               tools/extra/ Unpack clang-tools-extra-*.tar.gz here
+            flang/         Unpack clang-*.tar.gz here
             polly/         Unpack polly-*.tar.gz here
             lld/           Unpack lld-*.tar.gz here
             lldb/          Unpack lldb-*.tar.gz here
@@ -136,7 +138,7 @@
         for tmp in self.src:
             if tmp['name'].startswith("llvm-"):
                 self.llvm_src_dir = tmp['finalpath']
-                if self.version[-4:] == '-git':
+                if (self.version[-4:] == '-git') or (self.cfg['one_source']):
                     self.llvm_project_src_dir = self.llvm_src_dir
                     self.llvm_src_dir += '/llvm'
                 break
@@ -158,39 +160,42 @@
                                      glob_src_dirs)
             src_dirs[glob_src_dirs[0]] = targetdir
 
-        # git repo has no version suffixes
-        if self.version[-4:] == '-git':
-            globsuff = ''
-            clglobsuff = ''
-        else:
-            globsuff = '-*'
-            clglobsuff = '-%s*' % self.version
-        find_source_dir('compiler-rt%s' % globsuff, os.path.join(self.llvm_src_dir, 'runtimes', 'compiler-rt'))
+        if not self.cfg['one_source']:
+            # git repo has no version suffixes
+            if self.version[-4:] == '-git':
+                globsuff = ''
+                clglobsuff = ''
+            else:
+                globsuff = '-*'
+                clglobsuff = '-%s*' % self.version
+            find_source_dir('compiler-rt%s' % globsuff, os.path.join(self.llvm_src_dir, 'runtimes', 'compiler-rt'))
 
-        if self.cfg["usepolly"]:
-            find_source_dir('polly%s' % globsuff, os.path.join(self.llvm_src_dir, 'tools', 'polly'))
+            if self.cfg["usepolly"]:
+                find_source_dir('polly%s' % globsuff, os.path.join(self.llvm_src_dir, 'tools', 'polly'))
 
-        if self.cfg["build_lld"]:
-            find_source_dir('lld%s' % globsuff, os.path.join(self.llvm_src_dir, 'tools', 'lld'))
+            if self.cfg["build_lld"]:
+                find_source_dir('lld%s' % globsuff, os.path.join(self.llvm_src_dir, 'tools', 'lld'))
 
-        if self.cfg["libcxx"]:
-            find_source_dir('libcxx%s' % globsuff, os.path.join(self.llvm_src_dir, 'runtimes', 'libcxx'))
-            find_source_dir('libcxxabi%s' % globsuff, os.path.join(self.llvm_src_dir, 'runtimes', 'libcxxabi'))
+            if self.cfg["libcxx"]:
+                find_source_dir('libcxx%s' % globsuff, os.path.join(self.llvm_src_dir, 'runtimes', 'libcxx'))
+                find_source_dir('libcxxabi%s' % globsuff, os.path.join(self.llvm_src_dir, 'runtimes', 'libcxxabi'))
 
-        find_source_dir('libunwind%s' % globsuff, os.path.join(self.llvm_src_dir, 'runtimes', 'libunwind'))
-        find_source_dir('lldb%s' % globsuff, os.path.join(self.llvm_src_dir, 'tools', 'lldb'))
+            find_source_dir('libunwind%s' % globsuff, os.path.join(self.llvm_src_dir, 'runtimes', 'libunwind'))
+            find_source_dir('lldb%s' % globsuff, os.path.join(self.llvm_src_dir, 'tools', 'lldb'))
 
-        find_source_dir(['cfe%s' % globsuff,'clang%s' % clglobsuff], os.path.join(self.llvm_src_dir, 'tools', 'clang'))
-        find_source_dir('clang-tools-extra%s' % globsuff, os.path.join(self.llvm_src_dir, 'tools/clang/tools', 'extra'))
+            find_source_dir(['cfe%s' % globsuff,'clang%s' % clglobsuff], os.path.join(self.llvm_src_dir, 'tools', 'clang'))
+            find_source_dir('clang-tools-extra%s' % globsuff, os.path.join(self.llvm_src_dir, 'tools/clang/tools', 'extra'))
 
-        if LooseVersion(self.version) >= LooseVersion('3.8'):
-            find_source_dir('openmp%s' % globsuff, os.path.join(self.llvm_src_dir, 'projects', 'openmp'))
-        if LooseVersion(self.version) >= LooseVersion('11.0'):
-            find_source_dir('parallel-libs%s' % globsuff, os.path.join(self.llvm_src_dir, 'projects', 'parallel-libs'))
-#            find_source_dir('mlir%s' % globsuff, os.path.join(self.llvm_src_dir, 'projects', 'mlir'))
-            find_source_dir('pstl%s' % globsuff, os.path.join(self.llvm_src_dir, 'projects', 'pstl'))
+            find_source_dir('flang%s' % clglobsuff, os.path.join(self.llvm_src_dir, 'tools', 'flang'))
 
-        if self.version[-4:] == '-git':
+            if LooseVersion(self.version) >= LooseVersion('3.8'):
+                find_source_dir('openmp%s' % globsuff, os.path.join(self.llvm_src_dir, 'projects', 'openmp'))
+            if LooseVersion(self.version) >= LooseVersion('12.0'):
+                find_source_dir('parallel-libs%s' % globsuff, os.path.join(self.llvm_src_dir, 'projects', 'parallel-libs'))
+    #            find_source_dir('mlir%s' % globsuff, os.path.join(self.llvm_src_dir, 'projects', 'mlir'))
+                find_source_dir('pstl%s' % globsuff, os.path.join(self.llvm_src_dir, 'projects', 'pstl'))
+
+        if (self.version[-4:] == '-git') or (self.cfg['one_source']):
             for (dirname, new_path) in src_dirs.items():
                 old_path = os.path.join(self.llvm_project_src_dir, dirname)
                 try:
@@ -283,6 +288,9 @@
         if self.cfg["usepolly"]:
             self.cfg.update('configopts', "-DLINK_POLLY_INTO_TOOLS=ON")
 
+        if self.cfg['one_source']:
+            self.cfg.update('configopts', "-DLLVM_ENABLE_PROJECTS\"=clang;clang-tools-extra;compiler-rt;flang;libcxx;libcxxabi;libunwind;lld;lldb;mlir;openmp;parallel-libs;polly;pstl\"")
+
         build_targets = self.cfg['build_targets']
         if build_targets is None:
             arch = get_cpu_architecture()
@@ -335,12 +343,12 @@
             for patchfile in patchfiles:
                 cmakelists = os.path.join(self.llvm_src_dir, 'projects/compiler-rt', patchfile, 'CMakeLists.txt')
                 if os.path.exists(cmakelists):
-                    regex_subs = [(r'.*add_subdirectory\(lit_tests\).*', '')]
+                    regex_subs = [('.*add_subdirectory\(lit_tests\).*', '')]
                     apply_regex_substitutions(cmakelists, regex_subs)
 
             # There is a common part seperate for the specific saniters, we disable all the common tests
             cmakelists = os.path.join('projects', 'compiler-rt', 'lib', 'sanitizer_common', 'CMakeLists.txt')
-            regex_subs = [(r'.*add_subdirectory\(tests\).*', '')]
+            regex_subs = [('.*add_subdirectory\(tests\).*', '')]
             apply_regex_substitutions(cmakelists, regex_subs)
 
         elif LooseVersion(self.version) < LooseVersion('10.0'):
@@ -393,18 +401,27 @@
         options += "-DCMAKE_STRIP='%s' " % STRIP
         options += "-DCMAKE_ADDR2LINE='%s' " % ADDR2LINE
 
+        self.cfg.update('configopts', '-DBENCHMARK_USE_LIBCXX=ON')
         self.cfg.update('configopts', '-DCLANG_DEFAULT_CXX_STDLIB=libc++')
-        self.cfg.update('configopts', "-DCLANG_DEFAULT_LINKER='%s'" % LD)
+        self.cfg.update('configopts', '-DCLANG_DEFAULT_LINKER=lld')
+        self.cfg.update('configopts', '-DFLANG_DEFAULT_LINKER=lld')
         self.cfg.update('configopts', '-DCLANG_DEFAULT_RTLIB=compiler-rt')
+        self.cfg.update('configopts', '-DFLANG_DEFAULT_RTLIB=compiler-rt')
-        self.cfg.update('configopts', '-DLLVM_TOOL_COMPILER_RT_BUILD=ON')
-        self.cfg.update('configopts', '-DLLVM_TOOL_LIBCXX_BUILD=ON')
-        self.cfg.update('configopts', '-DLLVM_TOOL_LIBCXXABI_BUILD=ON')
+        self.cfg.update('configopts', '-DCLANG_DEFAULT_UNWINDLIB=libunwind')
         self.cfg.update('configopts', '-DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON')
         self.cfg.update('configopts', '-DCOMPILER_RT_USE_LIBCXX=ON')
         self.cfg.update('configopts', '-DLIBCXXABI_USE_COMPILER_RT=ON')
         self.cfg.update('configopts', '-DLIBCXXABI_USE_LLVM_UNWINDER=ON')
+        self.cfg.update('configopts', '-DLIBCXXABI_ENABLE_STATIC_UNWINDER=ON')
+        self.cfg.update('configopts', '-DLIBCXX_CXX_ABI=libcxxabi')
         self.cfg.update('configopts', '-DLIBCXX_USE_COMPILER_RT=ON')
         self.cfg.update('configopts', '-DLIBUNWIND_USE_COMPILER_RT=ON')
+        self.cfg.update('configopts', '-DSANITIZER_CXX_ABI=libcxxabi')
+        self.cfg.update('configopts', '-DSANITIZER_USE_STATIC_CXX_ABI=ON')
+        self.cfg.update('configopts', '-DSANITIZER_USE_STATIC_LLVM_UNWINDER=ON')
+        
+
+
         options += self.cfg['configopts']
         options += "-DCMAKE_BUILD_TYPE=%s" % self.build_type
 
