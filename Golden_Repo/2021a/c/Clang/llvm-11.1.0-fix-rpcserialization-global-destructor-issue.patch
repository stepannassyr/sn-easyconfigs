diff --git a/llvm/include/llvm/ExecutionEngine/Orc/RPC/RPCSerialization.h b/llvm/include/llvm/ExecutionEngine/Orc/RPC/RPCSerialization.h
index 2f37ab40c7f8..1d0679e1780b 100644
--- a/llvm/include/llvm/ExecutionEngine/Orc/RPC/RPCSerialization.h
+++ b/llvm/include/llvm/ExecutionEngine/Orc/RPC/RPCSerialization.h
@@ -347,7 +347,7 @@ public:
       // key of the deserializers map to save us from duplicating the string in
       // the serializer. This should be changed to use a stringpool if we switch
       // to a map type that may move keys in memory.
-      std::lock_guard<std::recursive_mutex> Lock(DeserializersMutex);
+      std::lock_guard<std::recursive_mutex> Lock(GetDeserializersMutex());
       auto I =
         Deserializers.insert(Deserializers.begin(),
                              std::make_pair(std::move(Name),
@@ -357,7 +357,7 @@ public:
 
     {
       assert(KeyName != nullptr && "No keyname pointer");
-      std::lock_guard<std::recursive_mutex> Lock(SerializersMutex);
+      std::lock_guard<std::recursive_mutex> Lock(GetSerializersMutex());
       Serializers[ErrorInfoT::classID()] =
           [KeyName, Serialize = std::move(Serialize)](
               ChannelT &C, const ErrorInfoBase &EIB) -> Error {
@@ -371,7 +371,7 @@ public:
   }
 
   static Error serialize(ChannelT &C, Error &&Err) {
-    std::lock_guard<std::recursive_mutex> Lock(SerializersMutex);
+    std::lock_guard<std::recursive_mutex> Lock(GetSerializersMutex());
 
     if (!Err)
       return serializeSeq(C, std::string());
@@ -386,7 +386,7 @@ public:
   }
 
   static Error deserialize(ChannelT &C, Error &Err) {
-    std::lock_guard<std::recursive_mutex> Lock(DeserializersMutex);
+    std::lock_guard<std::recursive_mutex> Lock(GetDeserializersMutex());
 
     std::string Key;
     if (auto Err = deserializeSeq(C, Key))
@@ -415,18 +415,19 @@ private:
                                                 inconvertibleErrorCode()));
   }
 
-  static std::recursive_mutex SerializersMutex;
-  static std::recursive_mutex DeserializersMutex;
+  static std::recursive_mutex &GetSerializersMutex() {
+    static std::recursive_mutex SerializersMutex;
+    return SerializersMutex;
+  }
+
+  static std::recursive_mutex &GetDeserializersMutex() {
+    static std::recursive_mutex DeserializersMutex;
+    return DeserializersMutex;
+  }
   static std::map<const void*, WrappedErrorSerializer> Serializers;
   static std::map<std::string, WrappedErrorDeserializer> Deserializers;
 };
 
-template <typename ChannelT>
-std::recursive_mutex SerializationTraits<ChannelT, Error>::SerializersMutex;
-
-template <typename ChannelT>
-std::recursive_mutex SerializationTraits<ChannelT, Error>::DeserializersMutex;
-
 template <typename ChannelT>
 std::map<const void*,
          typename SerializationTraits<ChannelT, Error>::WrappedErrorSerializer>
