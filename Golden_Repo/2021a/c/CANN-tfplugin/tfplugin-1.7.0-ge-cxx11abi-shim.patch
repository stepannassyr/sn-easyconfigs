diff --git a/CMakeLists.txt b/CMakeLists.txt
index 6c3c0b0..1b39479 100755
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -64,11 +67,21 @@ if (ENABLE_OPEN_SRC)
     )
     swig_add_library(_tf_adapter TYPE SHARED LANGUAGE python SOURCES ${SOURCES} ${CMAKE_BINARY_DIR}/dist/swig/ge_plugin.i OUTPUT_DIR ${CMAKE_BINARY_DIR}/dist/python/npu_bridge)
     set_property(TARGET _tf_adapter PROPERTY SWIG_COMPILE_OPTIONS -threads)
+
+    # cxx11 abi shim for GEGetErrorMsg()
+    add_library(ge_shim_oldabi OBJECT ge_cxx11_shim.cpp )
+    target_compile_options(ge_shim_oldabi PRIVATE -D_GLIBCXX_USE_CXX11_ABI=0)
+
+    add_library(ge_shim_newabi OBJECT ge_cxx11_shim.cpp )
+    target_compile_options(ge_shim_newabi PRIVATE -D_GLIBCXX_USE_CXX11_ABI=1)

     foreach (COMPILE_FLAG ${COMPILE_FLAGS})
         target_compile_options(_tf_adapter PUBLIC "${COMPILE_FLAG}")
     endforeach (COMPILE_FLAG)

+    target_link_libraries(_tf_adapter PRIVATE ge_shim_oldabi)
+    target_link_libraries(_tf_adapter PRIVATE ge_shim_newabi)
+
     target_link_libraries(_tf_adapter PUBLIC "dl")
     foreach (LINK_FLAG ${LINK_FLAGS})
         target_link_libraries(_tf_adapter PUBLIC "${LINK_FLAG}")
diff --git a/ge_cxx11_shim.cpp b/ge_cxx11_shim.cpp
new file mode 100644
index 0000000..cd0a42c
--- /dev/null
+++ b/ge_cxx11_shim.cpp
@@ -0,0 +1,158 @@
+#include "ge/ge_api.h"
+#include "graph/op_desc.h"
+#include "graph/node.h"
+#include "graph/model.h"
+#include "graph/compute_graph.h"
+#include "framework/memory/memory_api.h"
+#include "framework/omg/parser/parser_api.h" 
+
+#include <cstdlib>
+#include <cstring>
+#include <string>
+
+#include <ext/vstring.h>
+
+__gnu_cxx::__vstring _ge_GEGetErrorMsg();
+ge::Status _ge_GetVarBaseAddrAndSize(const __gnu_cxx::__vstring &var_name, uint64_t &base_addr, uint64_t &var_size);
+ge::Status _ge_GEInitialize(const std::map<__gnu_cxx::__vstring, __gnu_cxx::__vstring> &options);
+ge::Status _ge_ParserInitialize(const std::map<__gnu_cxx::__vstring, __gnu_cxx::__vstring>& options);
+
+#if 0 == _GLIBCXX_USE_CXX11_ABI
+
+std::map<std::string, std::string> map_convert(const std::map<__gnu_cxx::__vstring, __gnu_cxx::__vstring> &options)
+{
+    std::map<std::string,std::string> new_options;
+    for(auto& opt : options)
+    {
+        new_options.insert({std::string(opt.first.c_str(), opt.first.size()), std::string(opt.second.c_str(), opt.second.size())});
+    }
+    return new_options;
+}
+
+__gnu_cxx::__vstring _ge_GEGetErrorMsg()
+{
+    std::string ge_str = ge::GEGetErrorMsg();
+    return __gnu_cxx::__vstring(ge_str.c_str(), ge_str.size());
+}
+
+ge::Graph::Graph(const __gnu_cxx::__vstring& name)
+    : Graph(std::string(name.c_str(), name.size()))
+{
+}
+
+void ge::OpDesc::SetName(const __gnu_cxx::__vstring& name)
+{
+    SetName(std::string(name.c_str(), name.size()));
+}
+
+__gnu_cxx::__vstring ge::Node::GetNameV() const
+{
+    std::string ge_str = GetName();
+    return __gnu_cxx::__vstring(ge_str.c_str(), ge_str.size());
+}
+
+ge::Model::Model(const __gnu_cxx::__vstring &name, const __gnu_cxx::__vstring &custom_version)
+    : Model(std::string(name.c_str(),name.size()), std::string(custom_version.c_str(), custom_version.size()))
+{
+}
+
+ge::ComputeGraph::ComputeGraph(const __gnu_cxx::__vstring& name)
+    : ComputeGraph(std::string(name.c_str(), name.size()))
+{
+}
+
+ge::Status ge::Session::AddGraph(uint32_t graphId, const Graph &graph, const std::map<__gnu_cxx::__vstring, __gnu_cxx::__vstring> &options)
+{
+    return AddGraph(graphId, graph, map_convert(options));
+}
+
+ge::Status _ge_GetVarBaseAddrAndSize(const __gnu_cxx::__vstring &var_name, uint64_t &base_addr, uint64_t &var_size)
+{
+    return ge::GetVarBaseAddrAndSize(std::string(var_name.c_str(), var_name.size()), base_addr, var_size);
+}
+
+ge::Status _ge_GEInitialize(const std::map<__gnu_cxx::__vstring, __gnu_cxx::__vstring> &options)
+{
+    return ge::GEInitialize(map_convert(options));
+}
+
+ge::Status _ge_ParserInitialize(const std::map<__gnu_cxx::__vstring, __gnu_cxx::__vstring>& options)
+{
+    return ge::ParserInitialize(map_convert(options));
+}
+
+ge::Session::Session(const std::map<__gnu_cxx::__vstring, __gnu_cxx::__vstring> &options)
+    : Session(map_convert(options))
+{
+}
+
+
+#else
+
+std::map<__gnu_cxx::__vstring, __gnu_cxx::__vstring> map_convert(const std::map<std::string, std::string> &options)
+{
+    std::map<__gnu_cxx::__vstring,__gnu_cxx::__vstring> new_options;
+    for(auto& opt : options)
+    {
+        new_options.insert({__gnu_cxx::__vstring(opt.first.c_str(), opt.first.size()), __gnu_cxx::__vstring(opt.second.c_str(), opt.second.size())});
+    }
+    return new_options;
+}
+
+std::string ge::GEGetErrorMsg()
+{
+    __gnu_cxx::__vstring vstr = _ge_GEGetErrorMsg();
+    return std::string(vstr.c_str(), vstr.size());
+}
+
+ge::Graph::Graph(const std::string& name)
+    : Graph(__gnu_cxx::__vstring(name.c_str(), name.size()))
+{
+}
+
+void ge::OpDesc::SetName(const std::string& name)
+{
+    SetName(__gnu_cxx::__vstring(name.c_str(), name.size()));
+}
+
+std::string ge::Node::GetName() const
+{
+    __gnu_cxx::__vstring ge_str = GetNameV();
+    return std::string(ge_str.c_str(), ge_str.size());
+}
+
+ge::Model::Model(const std::string &name, const std::string &custom_version)
+    : Model(__gnu_cxx::__vstring(name.c_str(),name.size()), __gnu_cxx::__vstring(custom_version.c_str(), custom_version.size()))
+{
+}
+
+ge::ComputeGraph::ComputeGraph(const std::string& name)
+    : ComputeGraph(__gnu_cxx::__vstring(name.c_str(), name.size()))
+{
+}
+
+ge::Status ge::Session::AddGraph(uint32_t graphId, const Graph &graph, const std::map<std::string, std::string> &options)
+{
+    return AddGraph(graphId, graph, map_convert(options));
+}
+
+ge::Status ge::GetVarBaseAddrAndSize(const std::string &var_name, uint64_t &base_addr, uint64_t &var_size)
+{
+    return _ge_GetVarBaseAddrAndSize(__gnu_cxx::__vstring(var_name.c_str(), var_name.size()), base_addr, var_size);
+}
+
+ge::Status ge::GEInitialize(const std::map<std::string, std::string> &options)
+{
+    return _ge_GEInitialize(map_convert(options));
+}
+
+ge::Status ge::ParserInitialize(const std::map<std::string, std::string>& options)
+{
+    return _ge_ParserInitialize(map_convert(options));
+}
+
+ge::Session::Session(const std::map<std::string, std::string> &options)
+    : Session(map_convert(options))
+{
+}
+#endif
diff --git a/inc/graphengine/inc/external/ge/ge_api.h b/inc/graphengine/inc/external/ge/ge_api.h
index c2cbe79..e9da939 100644
--- a/inc/graphengine/inc/external/ge/ge_api.h
+++ b/inc/graphengine/inc/external/ge/ge_api.h
@@ -26,6 +26,8 @@
 #include "graph/graph.h"
 #include "graph/tensor.h"
 
+#include <ext/vstring.h>
+
 namespace ge {
 typedef uint32_t (*pCallBackFunc)(uint32_t graph_id, const std::map<std::string, ge::Tensor> &params_list);
 
@@ -50,6 +52,7 @@ class GE_FUNC_VISIBILITY Session {
  public:
   ATTRIBUTED_DEPRECATED(Session(const std::map<AscendString, AscendString> &))
   explicit Session(const std::map<std::string, std::string> &options);
+  explicit Session(const std::map<__gnu_cxx::__vstring, __gnu_cxx::__vstring> &options);
 
   explicit Session(const std::map<AscendString, AscendString> &options);
 
@@ -74,6 +77,8 @@ class GE_FUNC_VISIBILITY Session {
   ATTRIBUTED_DEPRECATED(Status AddGraph(uint32_t, const Graph &, const std::map<AscendString, AscendString> &))
   Status AddGraph(uint32_t graphId, const Graph &graph, const std::map<std::string, std::string> &options);
 
+  Status AddGraph(uint32_t graphId, const Graph &graph, const std::map<__gnu_cxx::__vstring, __gnu_cxx::__vstring> &options);
+
   ///
   /// @ingroup client
   /// @brief add a graph with a specific graphId and graphOptions
diff --git a/inc/metadef/inc/external/graph/graph.h b/inc/metadef/inc/external/graph/graph.h
index 35a4b61..6772ead 100644
--- a/inc/metadef/inc/external/graph/graph.h
+++ b/inc/metadef/inc/external/graph/graph.h
@@ -22,6 +22,8 @@
 #include <utility>
 #include <vector>
 
+#include <ext/vstring.h>
+
 #include "./operator.h"
 #include "./gnode.h"
 
@@ -37,6 +39,7 @@ class GE_FUNC_DEV_VISIBILITY GE_FUNC_HOST_VISIBILITY Graph {
 
  public:
   ATTRIBUTED_DEPRECATED(Graph(const char *))
+  explicit Graph(const __gnu_cxx::__vstring &name);
   explicit Graph(const std::string &name);
 
   explicit Graph(const char *name);
diff --git a/inc/metadef/inc/graph/compute_graph.h b/inc/metadef/inc/graph/compute_graph.h
index 2105fa5..e5813d2 100644
--- a/inc/metadef/inc/graph/compute_graph.h
+++ b/inc/metadef/inc/graph/compute_graph.h
@@ -31,6 +31,8 @@
 #include "graph/op_desc.h"
 #include "graph/range_vistor.h"
 
+#include <ext/vstring.h>
+
 namespace ge {
 using ConstComputeGraph = const ComputeGraph;
 
@@ -51,6 +53,7 @@ class ComputeGraph : public std::enable_shared_from_this<ComputeGraph>, public A
   using Vistor = RangeVistor<T, std::shared_ptr<ConstComputeGraph>>;
 
   explicit ComputeGraph(const std::string &name);
+  explicit ComputeGraph(const __gnu_cxx::__vstring &name);
   ~ComputeGraph() override;
   ComputeGraph(const ge::ComputeGraph&);
   ComputeGraph(ge::ComputeGraph&&);
diff --git a/inc/metadef/inc/graph/model.h b/inc/metadef/inc/graph/model.h
index 0aa6c6a..a0b0b7c 100644
--- a/inc/metadef/inc/graph/model.h
+++ b/inc/metadef/inc/graph/model.h
@@ -37,6 +37,7 @@ class GE_FUNC_DEV_VISIBILITY GE_FUNC_HOST_VISIBILITY Model : public AttrHolder {
   ~Model() = default;
 
   Model(const std::string &name, const std::string &custom_version);
+  Model(const __gnu_cxx::__vstring &name, const __gnu_cxx::__vstring &custom_version);
 
   std::string GetName() const;
   void SetName(const std::string &name);
diff --git a/inc/metadef/inc/graph/node.h b/inc/metadef/inc/graph/node.h
index 7c749cb..b803fa3 100644
--- a/inc/metadef/inc/graph/node.h
+++ b/inc/metadef/inc/graph/node.h
@@ -29,6 +29,8 @@
 #include "graph/op_desc.h"
 #include "graph/range_vistor.h"
 
+#include <ext/vstring.h>
+
 namespace ge {
 class ComputeGraph;
 
@@ -95,6 +97,7 @@ class Node : public std::enable_shared_from_this<Node> {
  public:
   graphStatus Init();
 
+  __gnu_cxx::__vstring GetNameV() const;
   std::string GetName() const;
   std::string GetType() const;
 
diff --git a/inc/metadef/inc/graph/op_desc.h b/inc/metadef/inc/graph/op_desc.h
index 5aa7fba..3a2f5c2 100644
--- a/inc/metadef/inc/graph/op_desc.h
+++ b/inc/metadef/inc/graph/op_desc.h
@@ -28,6 +28,8 @@
 #include "detail/attributes_holder.h"
 #include "graph/range_vistor.h"
 
+#include <ext/vstring.h>
+
 #define DYNAMIN_INPUT_NAME(name, index) (((name)) + std::to_string((index)))
 #define DYNAMIN_OUTPUT_NAME(name, index) (((name)) + std::to_string((index)))
 namespace ge {
@@ -84,6 +86,7 @@ class OpDesc : public std::enable_shared_from_this<OpDesc>, public AttrHolder {
   std::string GetName() const;
 
   void SetName(const std::string &name);
+  void SetName(const __gnu_cxx::__vstring &name);
 
   std::string GetType() const;
 
