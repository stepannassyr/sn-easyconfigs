# Author: 2022 Stepan Nassyr (Forschungszentrum Juelich)
#
# WARNING: This will fail to compile due to use of 'env -' by bazel and not propagating the 
#          environment to protoc calls The proper solution would be to patch Bazel or ray to
#          propagate the environment, but I just did the following workaround:
#
#          sudo mkdir /usr/libreplace
#          sudo mkdir /usr/liborig
#          (as root) cat "/usr/libreplace" >> /etc/ld.so.conf.d/raybuildlibs.conf
#          module load GCC/<version>
#          sudo cp $EBROOTGCC/lib64/libstdc++*so* /usr/libreplace/
#          sudo cp <any other libraries it doesn't find> /usr/libreplace/
#          sudo mv /usr/lib64/libstdc++*so* /usr/liborig
#          sudo ldconfig
#          <build ray>
#          sudo mv /usr/liborig/libstdc++*so* /usr/lib64
#          sudo rm /etc/ld.so.conf.d/raybuildlibs.conf
#          sudo ldconfig
#
#          This is obviously an ugly hack, but I can't invest more time into this right now
#          Related links:
#          https://github.com/bazelbuild/bazel/pull/11860
#          https://github.com/grpc/grpc/pull/23664
#
easyblock = 'PythonPackage'

name = 'ray-project'
version = '1.12.0'

versionsuffix = '-Python-%(pyver)s'

homepage = "https://www.ray.io/"
description = "An open source framework that provides a simple, universal API for building distributed applications. Ray is packaged with RLlib, a scalable reinforcement learning library, and Tune, a scalable hyperparameter tuning library."

toolchain = {'name': 'goolf', 'version': '2021a.11'}
toolchainopts = {'usempi': True}

source_urls = ['https://github.com/%(name)s/ray/archive/refs/tags/']
sources     = ['ray-%(version)s.tar.gz']
checksums   = ['f358a942c35890c8939706ef0362569bcd3aca225109b6875492c4832caf2fe7']
patches     = ['ray-project-1.12.0-bazelrc-env.patch']

builddependencies = [
    ('Bazel', '5.1.1')
]

dependencies = [
    ('Python', '3.9.4'),
    ('Arrow', '7.0.0', versionsuffix),
    ('ray-deps', version, versionsuffix),
    ('SciPy-Stack', '2021a', versionsuffix),
    ('PyYAML', '5.4.1', versionsuffix),
    ('dm-tree', '0.1.7', versionsuffix),
    ('protobuf', '3.16.0'),
    ('nodejs', '16.15.0'),
#    ('gRPC', '1.37.1'),
    ('lz4', '1.9.3'),
]

use_pip = True
sanity_pip_check = True
options = {'modulename': 'ray'}

preinstallopts  = 'cd dashboard/client && '
preinstallopts += 'npm install && '
preinstallopts += 'npm run build && '
# Bazel picks up the headers with the patches but still insists on building it's own versions which then conflict
# with the modules. I don't know how to make Bazel use these libraries, so just unload them and let it build them
preinstallopts += 'module unload nodejs && '
preinstallopts += 'module unload protobuf && '
preinstallopts += 'module unload Boost && '
preinstallopts += 'cd ../../python && BAZEL_LIMIT_CPUS=$EASYBUILD_PARALLEL '

postinstallcmds = [
    """export eggdest=$(cat %(installdir)s/lib/python%(pyshortver)s/site-packages/ray.egg-link | head -n1);
       cp -r $eggdest/ray* %(installdir)s/lib/python%(pyshortver)s/site-packages/;
       rm %(installdir)s/lib/python%(pyshortver)s/site-packages/ray/{rllib,dashboard};
       cp -r $eggdest/{../dashboard,../rllib}  %(installdir)s/lib/python%(pyshortver)s/site-packages/ray/;
       rm %(installdir)s/lib/python%(pyshortver)s/site-packages/ray.egg-link"""]

use_pip_editable = True

sanity_check_paths = {
    'files': ['bin/ray'],
    'dirs': ['lib/python%(pyshortver)s/site-packages'],
}
sanity_check_commands = [
    'ray --help'
]

moduleclass = 'tools'
