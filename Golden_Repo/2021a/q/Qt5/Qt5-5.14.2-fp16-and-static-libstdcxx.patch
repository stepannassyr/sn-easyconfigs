diff -urN qt-everywhere-src-5.14.2-unpatched/qtwebengine/src/3rdparty/chromium/third_party/skia/src/opts/SkRasterPipeline_opts.h qt-everywhere-src-5.14.2/qtwebengine/src/3rdparty/chromium/third_party/skia/src/opts/SkRasterPipeline_opts.h
--- qt-everywhere-src-5.14.2-unpatched/qtwebengine/src/3rdparty/chromium/third_party/skia/src/opts/SkRasterPipeline_opts.h	2020-04-25 23:12:39.940898315 +0200
+++ qt-everywhere-src-5.14.2/qtwebengine/src/3rdparty/chromium/third_party/skia/src/opts/SkRasterPipeline_opts.h	2020-04-25 23:14:33.421444295 +0200
@@ -974,9 +974,10 @@
 SI F from_half(U16 h) {
 #if defined(JUMPER_IS_NEON) && defined(SK_CPU_ARM64) \
     && !defined(SK_BUILD_FOR_GOOGLE3)  // Temporary workaround for some Google3 builds.
-    __fp16 fp16;
-    memcpy(&fp16, &h, sizeof(U16));
-    return float(fp16);
+    //__fp16 fp16;
+    //memcpy(&fp16, &h, sizeof(U16));
+    //return float(fp16);
+    return vcvt_f32_f16(h);
 
 #elif defined(JUMPER_IS_HSW) || defined(JUMPER_IS_AVX512)
     return _mm256_cvtph_ps(h);
@@ -997,10 +998,11 @@
 SI U16 to_half(F f) {
 #if defined(JUMPER_IS_NEON) && defined(SK_CPU_ARM64) \
     && !defined(SK_BUILD_FOR_GOOGLE3)  // Temporary workaround for some Google3 builds.
-    __fp16 fp16 = __fp16(f);
-    U16 u16;
-    memcpy(&u16, &fp16, sizeof(U16));
-    return u16;
+    //__fp16 fp16 = __fp16(f);
+    //U16 u16;
+    //memcpy(&u16, &fp16, sizeof(U16));
+    //return u16;
+    return vcvt_f16_f32(f);
 
 #elif defined(JUMPER_IS_HSW) || defined(JUMPER_IS_AVX512)
     return _mm256_cvtps_ph(f, _MM_FROUND_CUR_DIRECTION);
diff -urN qt-everywhere-src-5.14.2-unpatched/qtwebengine/src/3rdparty/gn/build/gen.py qt-everywhere-src-5.14.2/qtwebengine/src/3rdparty/gn/build/gen.py
--- qt-everywhere-src-5.14.2-unpatched/qtwebengine/src/3rdparty/gn/build/gen.py	2020-04-25 23:12:39.060894081 +0200
+++ qt-everywhere-src-5.14.2/qtwebengine/src/3rdparty/gn/build/gen.py	2020-04-25 23:17:06.352180566 +0200
@@ -359,8 +359,8 @@
     if platform.is_linux():
       ldflags.append('-Wl,--as-needed')
 
-      if not options.no_static_libstdcpp:
-        ldflags.append('-static-libstdc++')
+#      if not options.no_static_libstdcpp:
+#        ldflags.append('-static-libstdc++')
 
       # This is needed by libc++.
       libs.append('-ldl')
