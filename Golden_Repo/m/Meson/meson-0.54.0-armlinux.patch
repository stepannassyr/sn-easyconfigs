diff -urN meson-0.54.0-unpatched/mesonbuild/build.py meson-0.54.0/mesonbuild/build.py
--- meson-0.54.0-unpatched/mesonbuild/build.py	2020-04-05 18:00:25.782314061 +0200
+++ meson-0.54.0/mesonbuild/build.py	2020-04-05 18:01:53.152751687 +0200
@@ -1483,9 +1483,9 @@
                 self.suffix = 'exe'
             elif machine.system.startswith('wasm') or machine.system == 'emscripten':
                 self.suffix = 'js'
-            elif ('c' in self.compilers and self.compilers['c'].get_id().startswith('arm') or
-                  'cpp' in self.compilers and self.compilers['cpp'].get_id().startswith('arm')):
-                self.suffix = 'axf'
+#            elif ('c' in self.compilers and self.compilers['c'].get_id().startswith('arm') or
+#                  'cpp' in self.compilers and self.compilers['cpp'].get_id().startswith('arm')):
+#                self.suffix = 'axf'
             elif ('c' in self.compilers and self.compilers['c'].get_id().startswith('ccrx') or
                   'cpp' in self.compilers and self.compilers['cpp'].get_id().startswith('ccrx')):
                 self.suffix = 'abs'
diff -urN meson-0.54.0-unpatched/mesonbuild/compilers/cpp.py meson-0.54.0/mesonbuild/compilers/cpp.py
--- meson-0.54.0-unpatched/mesonbuild/compilers/cpp.py	2020-04-05 18:00:25.782314061 +0200
+++ meson-0.54.0/mesonbuild/compilers/cpp.py	2020-04-05 18:01:53.152751687 +0200
@@ -36,6 +36,7 @@
 from .mixins.gnu import GnuCompiler
 from .mixins.intel import IntelGnuLikeCompiler, IntelVisualStudioLikeCompiler
 from .mixins.clang import ClangCompiler
+from .mixins.armlinux import ArmLinuxCompiler
 from .mixins.elbrus import ElbrusCompiler
 from .mixins.pgi import PGICompiler
 from .mixins.emscripten import EmscriptenMixin
@@ -139,7 +140,7 @@
         }
 
         # Currently, remapping is only supported for Clang, Elbrus and GCC
-        assert(self.id in frozenset(['clang', 'lcc', 'gcc', 'emscripten']))
+        assert(self.id in frozenset(['armclang', 'clang', 'lcc', 'gcc', 'emscripten']))
 
         if cpp_std not in CPP_FALLBACKS:
             # 'c++03' and 'c++98' don't have fallback types
@@ -203,6 +204,16 @@
         return ['-lstdc++']
 
 
+class ArmLinuxCPPCompiler(ClangCPPCompiler):
+    def __init__(self, exelist, version, for_machine: MachineChoice,
+                 is_cross: bool, info: 'MachineInfo', exe_wrapper=None, **kwargs):
+        ClangCPPCompiler.__init__(self, exelist=exelist, version=version,
+                                  for_machine=for_machine, is_cross=is_cross,
+                                  info=info, exe_wrapper=exe_wrapper, **kwargs)
+        self.id = 'armclang'
+
+
+
 class AppleClangCPPCompiler(ClangCPPCompiler):
 
     pass
diff -urN meson-0.54.0-unpatched/mesonbuild/compilers/c.py meson-0.54.0/mesonbuild/compilers/c.py
--- meson-0.54.0-unpatched/mesonbuild/compilers/c.py	2020-04-05 18:00:25.782314061 +0200
+++ meson-0.54.0/mesonbuild/compilers/c.py	2020-04-05 18:01:53.152751687 +0200
@@ -28,6 +28,7 @@
 from .mixins.gnu import GnuCompiler
 from .mixins.intel import IntelGnuLikeCompiler, IntelVisualStudioLikeCompiler
 from .mixins.clang import ClangCompiler
+from .mixins.armlinux import ArmLinuxCompiler
 from .mixins.elbrus import ElbrusCompiler
 from .mixins.pgi import PGICompiler
 from .mixins.emscripten import EmscriptenMixin
@@ -129,6 +130,15 @@
         return []
 
 
+class ArmLinuxCCompiler(ClangCCompiler):
+    def __init__(self, exelist, version, for_machine: MachineChoice,
+                 is_cross: bool, info: 'MachineInfo', exe_wrapper=None, **kwargs):
+        ClangCCompiler.__init__(self, exelist=exelist, version=version,
+                                for_machine=for_machine, is_cross=is_cross,
+                                info=info, exe_wrapper=exe_wrapper, **kwargs)
+        self.id = 'armclang'
+
+
 class AppleClangCCompiler(ClangCCompiler):
 
     """Handle the differences between Apple Clang and Vanilla Clang.
diff -urN meson-0.54.0-unpatched/mesonbuild/compilers/fortran.py meson-0.54.0/mesonbuild/compilers/fortran.py
--- meson-0.54.0-unpatched/mesonbuild/compilers/fortran.py	2020-04-05 18:00:25.782314061 +0200
+++ meson-0.54.0/mesonbuild/compilers/fortran.py	2020-04-05 18:01:53.152751687 +0200
@@ -27,6 +27,7 @@
 )
 from .mixins.intel import IntelGnuLikeCompiler, IntelVisualStudioLikeCompiler
 from .mixins.clang import ClangCompiler
+from .mixins.armlinux import ArmLinuxCompiler
 from .mixins.elbrus import ElbrusCompiler
 from .mixins.pgi import PGICompiler
 from .. import mlog
@@ -409,6 +410,14 @@
     def language_stdlib_only_link_flags(self) -> T.List[str]:
         return ['-lflang', '-lpgmath']
 
+class ArmLinuxFortranCompiler(FlangFortranCompiler):
+    def __init__(self, exelist, version, for_machine: MachineChoice,
+                 is_cross, info: 'MachineInfo', exe_wrapper=None,
+                 **kwargs):
+        FlangFortranCompiler.__init__(self, exelist, version, for_machine,
+                                 is_cross, info, exe_wrapper, **kwargs)
+        self.id = 'armflang'
+
 class Open64FortranCompiler(FortranCompiler):
     def __init__(self, exelist, version, for_machine: MachineChoice,
                  is_cross, info: 'MachineInfo', exe_wrapper=None,
diff -urN meson-0.54.0-unpatched/mesonbuild/compilers/__init__.py meson-0.54.0/mesonbuild/compilers/__init__.py
--- meson-0.54.0-unpatched/mesonbuild/compilers/__init__.py	2020-04-05 18:00:25.782314061 +0200
+++ meson-0.54.0/mesonbuild/compilers/__init__.py	2020-04-05 18:01:53.152751687 +0200
@@ -36,6 +36,9 @@
 
     'AppleClangCCompiler',
     'AppleClangCPPCompiler',
+    'ArmLinuxCCompiler',
+    'ArmLinuxCPPCompiler',
+    'ArmLinuxFortranCompiler',
     'ArmCCompiler',
     'ArmCPPCompiler',
     'ArmclangCCompiler',
@@ -128,6 +131,7 @@
 from .c import (
     CCompiler,
     AppleClangCCompiler,
+    ArmLinuxCCompiler,
     ArmCCompiler,
     ArmclangCCompiler,
     ClangCCompiler,
@@ -146,6 +150,7 @@
 from .cpp import (
     CPPCompiler,
     AppleClangCPPCompiler,
+    ArmLinuxCPPCompiler,
     ArmCPPCompiler,
     ArmclangCPPCompiler,
     ClangCPPCompiler,
@@ -173,6 +178,7 @@
     G95FortranCompiler,
     GnuFortranCompiler,
     ElbrusFortranCompiler,
+    ArmLinuxFortranCompiler,
     FlangFortranCompiler,
     IntelFortranCompiler,
     IntelClFortranCompiler,
diff -urN meson-0.54.0-unpatched/mesonbuild/compilers/mixins/armlinux.py meson-0.54.0/mesonbuild/compilers/mixins/armlinux.py
--- meson-0.54.0-unpatched/mesonbuild/compilers/mixins/armlinux.py	1970-01-01 01:00:00.000000000 +0100
+++ meson-0.54.0/mesonbuild/compilers/mixins/armlinux.py	2020-04-05 18:01:53.152751687 +0200
@@ -0,0 +1,22 @@
+# Copyright 2020 Stepan Nassyr Forschungszentrum Juelich GmbH
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+"""Abstractions for the Arm Compiler for Linux (armclang)."""
+
+from .clang import ClangCompiler
+
+class ArmLinuxCompiler(ClangCompiler):
+    def __init__(self):
+        super().__init__()
+        self.id = 'armclang'
diff -urN meson-0.54.0-unpatched/mesonbuild/environment.py meson-0.54.0/mesonbuild/environment.py
--- meson-0.54.0-unpatched/mesonbuild/environment.py	2020-04-05 18:00:25.782314061 +0200
+++ meson-0.54.0/mesonbuild/environment.py	2020-04-05 18:47:12.496265736 +0200
@@ -64,6 +64,9 @@
 )
 from functools import lru_cache
 from .compilers import (
+    ArmLinuxFortranCompiler,
+    ArmLinuxCCompiler,
+    ArmLinuxCPPCompiler,
     ArmCCompiler,
     ArmCPPCompiler,
     ArmclangCCompiler,
@@ -606,11 +609,11 @@
                 self.default_objc = []
                 self.default_objcpp = []
             else:
-                self.default_c = ['cc', 'gcc', 'clang', 'pgcc', 'icc']
-                self.default_cpp = ['c++', 'g++', 'clang++', 'pgc++', 'icpc']
+                self.default_c = ['cc', 'gcc', 'armclang', 'clang', 'pgcc', 'icc']
+                self.default_cpp = ['c++', 'g++', 'armclang++', 'clang++', 'pgc++', 'icpc']
                 self.default_objc = ['cc', 'gcc', 'clang']
                 self.default_objcpp = ['c++', 'g++', 'clang++']
-            self.default_fortran = ['gfortran', 'flang', 'pgfortran', 'ifort', 'g95']
+            self.default_fortran = ['gfortran', 'armflang', 'flang', 'pgfortran', 'ifort', 'g95']
             self.default_cs = ['mcs', 'csc']
         self.default_d = ['ldc2', 'ldc', 'gdc', 'dmd']
         self.default_java = ['javac']
@@ -1000,6 +1003,21 @@
                     ccache + compiler, version, for_machine, is_cross, info,
                     exe_wrap, linker=linker, full_version=full_version)
 
+            if 'Arm C/C++/Fortran Compiler' in out:
+                arm_ver_str = re.search('.*version ([0-9.]+).*',out)
+                if arm_ver_str is None:
+                    popen_exceptions[' '.join(compiler)] = 'version string not found'
+                    continue
+                arm_ver_str = arm_ver_str.group(1)
+                version = search_version(arm_ver_str)
+                full_version = arm_ver_str
+                cls = ArmLinuxCCompiler if lang == 'c' else ArmLinuxCPPCompiler
+                linker = self._guess_nix_linker(compiler, cls, for_machine)
+                self.coredata.add_lang_args(cls.language, cls, for_machine, self)
+                return cls(
+                    ccache + compiler, version, for_machine, is_cross, info,
+                    exe_wrap, full_version=full_version, linker=linker)
+
             if 'armclang' in out:
                 # The compiler version is not present in the first line of output,
                 # instead it is present in second line, startswith 'Component:'.
@@ -1275,6 +1293,19 @@
                         compiler, version, for_machine, is_cross, info, exe_wrap,
                         full_version=full_version, linker=linker)
 
+                if 'Arm C/C++/Fortran Compiler' in out:
+                    arm_ver_str = re.search('.*version ([0-9.]+).*',out)
+                    if arm_ver_str is None:
+                        popen_exceptions[' '.join(compiler)] = 'version string not found'
+                        continue
+                    arm_ver_str = arm_ver_str.group(1)
+                    version = search_version(arm_ver_str)
+                    full_version = arm_ver_str
+                    linker = self._guess_nix_linker(compiler, cls, for_machine)
+                    return ArmLinuxFortranCompiler(
+                        compiler, version, for_machine, is_cross, info,
+                        exe_wrap, full_version=full_version, linker=linker)
+
                 if 'flang' in out or 'clang' in out:
                     linker = self._guess_nix_linker(
                         compiler, FlangFortranCompiler, for_machine)
