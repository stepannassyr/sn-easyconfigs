diff -urN ucx-1.6.0-orig/src/ucs/arch/aarch64/cpu.h ucx-1.6.0/src/ucs/arch/aarch64/cpu.h
--- ucx-1.6.0-orig/src/ucs/arch/aarch64/cpu.h	2019-11-08 15:08:04.082831748 +0100
+++ ucx-1.6.0/src/ucs/arch/aarch64/cpu.h	2019-11-08 15:11:43.833919384 +0100
@@ -143,7 +143,7 @@
      *                   0x4
      *                   Smallest instruction cache line size is 16 words.
      */
-    asm volatile ("mrs\t%0, ctr_el0":"=r" (ctr_el0));
+    asm volatile ("mrs\t%x0, ctr_el0":"=r" (ctr_el0));
     icache = sizeof(int) << (ctr_el0 & 0xf);
     dcache = sizeof(int) << ((ctr_el0 >> 16) & 0xf);
 
diff -urN ucx-1.6.0-orig/test/apps/sockaddr/sa_main.cc ucx-1.6.0/test/apps/sockaddr/sa_main.cc
--- ucx-1.6.0-orig/test/apps/sockaddr/sa_main.cc	2019-11-08 15:08:04.092831797 +0100
+++ ucx-1.6.0/test/apps/sockaddr/sa_main.cc	2019-11-08 15:35:44.361099048 +0100
@@ -136,7 +136,7 @@
             m_params.response_size = atoi(optarg);
             break;
         case 'v':
-            log::more_verbose();
+            sa::log::more_verbose();
             break;
         default:
             throw usage_exception();
diff -urN ucx-1.6.0-orig/test/apps/sockaddr/sa_util.cc ucx-1.6.0/test/apps/sockaddr/sa_util.cc
--- ucx-1.6.0-orig/test/apps/sockaddr/sa_util.cc	2019-11-08 15:08:04.092831797 +0100
+++ ucx-1.6.0/test/apps/sockaddr/sa_util.cc	2019-11-08 15:23:22.977375831 +0100
@@ -84,9 +84,9 @@
     return fd;
 }
 
-log::level_t log::m_log_level = INFO;
+sa::log::level_t sa::log::m_log_level = INFO;
 
-log::log(log::level_t level, const std::string& file, int line) :
+sa::log::log(sa::log::level_t level, const std::string& file, int line) :
             m_enabled(level <= m_log_level) {
     if (m_enabled) {
         struct timeval tv;
@@ -99,14 +99,14 @@
     }
 }
 
-log::~log() {
+sa::log::~log() {
     if (m_enabled) {
         m_msg << std::endl;
         std::cout << m_msg.str() << std::flush;
     }
 }
 
-std::string log::level_str(log::level_t level) {
+std::string sa::log::level_str(sa::log::level_t level) {
     switch (level) {
     case INFO:
         return "INFO ";
@@ -117,7 +117,7 @@
     }
 }
 
-void log::more_verbose() {
+void sa::log::more_verbose() {
     if (m_log_level == INFO) {
         m_log_level = DEBUG;
     }
diff -urN ucx-1.6.0-orig/test/apps/sockaddr/sa_util.h ucx-1.6.0/test/apps/sockaddr/sa_util.h
--- ucx-1.6.0-orig/test/apps/sockaddr/sa_util.h	2019-11-08 15:08:04.092831797 +0100
+++ ucx-1.6.0/test/apps/sockaddr/sa_util.h	2019-11-08 15:22:48.167203865 +0100
@@ -73,35 +73,38 @@
 };
 
 #define LOG_INFO \
-    log(log::INFO, __FILE__, __LINE__)
+    sa::log(sa::log::INFO, __FILE__, __LINE__)
 #define LOG_DEBUG \
-    log(log::DEBUG, __FILE__, __LINE__)
+    sa::log(sa::log::DEBUG, __FILE__, __LINE__)
 
-/* logger */
-class log {
-public:
-    typedef enum {
-        INFO,
-        DEBUG
-    } level_t;
-
-    log(level_t level, const std::string& file, int line);
-    ~log();
-
-    template <typename T>
-    log& operator<<(const T& value) {
-        m_msg << value;
-        return *this;
-    }
-
-    static void more_verbose();
-
-private:
-    static std::string level_str(level_t level);
-
-    static level_t     m_log_level;
-    const bool         m_enabled;
-    std::ostringstream m_msg;
-};
+namespace sa
+{
+    /* logger */
+    class log {
+    public:
+        typedef enum {
+            INFO,
+            DEBUG
+        } level_t;
+
+        log(level_t level, const std::string& file, int line);
+        ~log();
+
+        template <typename T>
+        log& operator<<(const T& value) {
+            m_msg << value;
+            return *this;
+        }
+
+        static void more_verbose();
+
+    private:
+        static std::string level_str(level_t level);
+
+        static level_t     m_log_level;
+        const bool         m_enabled;
+        std::ostringstream m_msg;
+    };
+} //namespace sa
 
 #endif
